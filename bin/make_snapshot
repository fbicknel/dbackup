#!/usr/bin/env bash

function cleanup_snapshots () {
    declare -a F_SNAPSHOTS=("${!1}")
    local F_KEEP=$2
    local F_SNAPSHOT_QTY=${#F_SNAPSHOTS[@]}
    if [ $F_SNAPSHOT_QTY -eq 0 ]; then
        echo "No snapshots to clean up."
        return
    fi
    echo "Found $F_SNAPSHOT_QTY incremental snapshots. Clean up until $F_KEEP remain..."
    if [ $F_SNAPSHOT_QTY -lt $F_KEEP ]; then
        echo "Not enough snapshots to clean up (need at least $F_KEEP)"
        return
    fi
    # from  the array of snapshots we were given, we're going to want the
    # first (oldest), and last (newest) one
    local F_FIRST_SNAPSHOT=${F_SNAPSHOTS[0]}
    local F_LAST_SNAPSHOT=${F_SNAPSHOTS[-1]}
    local F_LAST_DELETED
    let F_LAST_DELETED=$F_SNAPSHOT_QTY-$F_KEEP
    local F_N=$F_LAST_DELETED
    local SS
    for SS in ${F_SNAPSHOTS[@]:0:$F_LAST_DELETED}; do
        echo "**** Cleaning up snapshot: $F_FIRST_SNAPSHOT (# $F_N)"
        if [ -n "$DRY_RUN" ]; then
            echo "(dry-run)"
            echo zfs destroy $SS
        else
            $SUDO zfs destroy $SS
        fi
        let F_N=${F_N}-1
    done
}

function get_snapshot_listing () {
    SNAPSHOT_LISTING=($($SUDO zfs list -Ht snapshot -o name))
}

function send_first_full_snapshot () {
    echo -e "\tRemoving all source _backup snapshots"
    SI_SNAPSHOTS=($(shuf -e "${SNAPSHOT_LISTING[@]}" | awk 'BEGIN { p="^'$SOURCE'@backup_" } $0~p {print $1}'))
    cleanup_snapshots SI_SNAPSHOTS[@] 0
    echo -e "\tRemoving all target snapshots (ALL)"
    AT_SNAPSHOTS=($(shuf -e "${SNAPSHOT_LISTING[@]}" | awk 'BEGIN { p="^'$TARGET'" } $0~p {print $1}'))
    cleanup_snapshots AT_SNAPSHOTS[@] 0
    echo -e "\tRemoving target ($TARGET)..."
    if [ -n "$DRY_RUN" ]; then
        echo "(dry-run)"
        echo zfs destroy $TARGET
    else
        $SUDO zfs destroy $TARGET
    fi
    get_snapshot_listing
    echo -e "\tCreate new snapshot on source ($SOURCE)"
    # Note the _F_ in the snapshot name: this denotes the 'full' progenitor
    if [ -n "$DRY_RUN" ]; then
        echo zfs snapshot "${SOURCE}@backup_F_$(date +%s)" 
        echo "(dry-run)"
    else
        $SUDO zfs snapshot "${SOURCE}@backup_F_$(date +%s)" # this is what we're here for
    fi
    get_snapshot_listing
    SI_SNAPSHOTS=($(shuf -e "${SNAPSHOT_LISTING[@]}" | awk 'BEGIN { p="^'$SOURCE'@backup_" } $0~p {print $1}'))
    echo -e "\tSending first full snapshot"
    if [ -n "$DRY_RUN" ]; then
        echo "(dry-run)"
        echo "zfs send ${SI_SNAPSHOTS[0]} | $SUDO zfs receive -F $TARGET"
        RV=0
    else
        $SUDO zfs send ${SI_SNAPSHOTS[0]} | $SUDO zfs receive -F $TARGET
        RV=$?
    fi
}

STARTTIME=$(date +%s)
echo "begin at $(date)."
SUDO=/usr/bin/sudo
POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -f|--force-full)
        FORCE_NEW="-new"
        shift # past argument
        ;;
    -p|--pool)
        POOL="$2"
        shift
        shift
        ;;
    -l|--use-last)
        USE_LAST_SNAPSHOT=1
        shift # past argument
        ;;
    -d|--dry-run)
        DRY_RUN=1
        shift;
        ;;
    *)    # unknown option
        POSITIONAL+=("$1") # save it in an array for later
        shift # past argument
        ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters
: ${POOL:=backup} #default is backup
# SUDO="echo"
SOURCE=${1:-home/fbicknel}
TARGET=${2:-$POOL/fbicknel_backup}
if [ -n "$FORCE_NEW" -a -n "$USE_LAST_SNAPSHOT" ]; then
    echo "You can't try to force a new full and say use the last snapshot"
    echo "--force-full and --use-last are mutually exclusive"
    exit 1
fi

echo "Backup from $SOURCE -> $TARGET"
if [ "$USE_LAST_SNAPSHOT" == 1 ]; then
    echo "We are using the last incremental snapshot if we find one."
else
    if [ -n "$DRY_RUN" ]; then
        echo "(dry-run)"
        echo zfs snapshot "${SOURCE}@backup_$(date +%s)" 
    else
        $SUDO zfs snapshot "${SOURCE}@backup_$(date +%s)" # this is what we're here for
    fi
fi
# First targets:
get_snapshot_listing
TI_SNAPSHOTS=($(shuf -e "${SNAPSHOT_LISTING[@]}" | awk 'BEGIN { p="^'$TARGET'@backup_[0-9]"   } $0~p {print $1}'))
TF_SNAPSHOTS=($(shuf -e "${SNAPSHOT_LISTING[@]}" | awk 'BEGIN { p="^'$TARGET'@backup_F_[0-9]" } $0~p {print $1}'))
if [ -n "$DEBUG" ]; then
    echo "TI: ${TI_SNAPSHOTS[@]}"
    echo "TF: ${TF_SNAPSHOTS[@]}"
fi

# Now sources;
SI_SNAPSHOTS=($(shuf -e "${SNAPSHOT_LISTING[@]}" | awk 'BEGIN { p="^'$SOURCE'@backup_[0-9]" } $0~p {print $1}'))
if [ "$USE_LAST_SNAPSHOT" == 1 ]; then
    echo "The last incremental snapshot was: ${SI_SNAPSHOTS[-1]}"
fi
SF_SNAPSHOTS=($(shuf -e "${SNAPSHOT_LISTING[@]}" | awk 'BEGIN { p="^'$SOURCE'@backup_F_[0-9]" } $0~p {print $1}'))
if [ -n "$DEBUG" ]; then
    echo "SI: ${SI_SNAPSHOTS[@]}"
    echo "SF: ${SF_SNAPSHOTS[@]}"
fi

SF_SNAPSHOT_QTY=${#SF_SNAPSHOTS[@]}
TF_SNAPSHOT_QTY=${#TF_SNAPSHOTS[@]}
let SI_SNAPSHOT_QTY=${#SI_SNAPSHOTS[@]}+${#SF_SNAPSHOTS[@]}
let TI_SNAPSHOT_QTY=${#TI_SNAPSHOTS[@]}+${#TF_SNAPSHOTS[@]}
echo "Found $SI_SNAPSHOT_QTY total source snapshots."
echo "Found $TI_SNAPSHOT_QTY total target snapshots."
if [ "$FORCE_NEW" = '-new' -o $TI_SNAPSHOT_QTY -eq 0 \
    -o $SI_SNAPSHOT_QTY -lt 2 -o $SF_SNAPSHOT_QTY -eq 0 ]; then
    if [ "$FORCE_NEW" = '-new' ]; then
        echo "Found -new as arg 3 on the command line."
    elif [ $SF_SNAPSHOT_QTY -eq 0 ]; then
        echo "No full snapshots found on source: start over"
    else
        echo "Not enough snapshots of either source ($SI_SNAPSHOT_QTY) or target ($TI_SNAPSHOT_QTY)"
    fi
    echo "**** Sending first snapshot, then."
    send_first_full_snapshot
else
    T_KEEP=5
    echo "Clean up target snapshots:"
    if [ -n "$DRY_RUN" ]; then
        echo "(dry-run)"
        echo cleanup_snapshots TI_SNAPSHOTS[@] $T_KEEP
    fi
    cleanup_snapshots TI_SNAPSHOTS[@] $T_KEEP
    S_KEEP=5
    echo "Clean up source snapshots:"
    if [ -n "$DRY_RUN" ]; then
        echo "(dry-run)"
        echo cleanup_snapshots SI_SNAPSHOTS[@] $S_KEEP
    fi
    cleanup_snapshots SI_SNAPSHOTS[@] $S_KEEP
    get_snapshot_listing
    SF_SNAPSHOTS=($(shuf -e "${SNAPSHOT_LISTING[@]}" | awk 'BEGIN { p="^'$SOURCE'@backup_F_" } $0~p {print $1}'))
    S_FULL_SNAPSHOT=${SF_SNAPSHOTS[-1]}
    S_LAST_SNAPSHOT=${SI_SNAPSHOTS[-1]}
    let S_LAST_DELETED=$SI_SNAPSHOT_QTY-$S_KEEP
    echo "Sending incremental snapshot data from $S_FULL_SNAPSHOT..$S_LAST_SNAPSHOT to $TARGET"
    if [ -n "$DRY_RUN" ]; then
        echo "(dry-run)"
        echo "zfs send -i $S_FULL_SNAPSHOT $S_LAST_SNAPSHOT | zfs receive -F $TARGET"
        RV=0
    else
        $SUDO zfs send -i $S_FULL_SNAPSHOT $S_LAST_SNAPSHOT | $SUDO zfs receive -F $TARGET
        RV=$?
    fi
    if [ $RV != 0 ]; then
        echo
        echo "That didn't go well. I'll try sending a full snapshot instead:"
        send_first_full_snapshot
    fi
fi
ENDTIME=$(date +%s)
echo "done at $(date). $(($ENDTIME - $STARTTIME)) elapsed seconds"
exit $RV
