#!/usr/bin/perl
use strict;
use warnings;
use v5.10;

my $VERSION = '0.8';

use Cwd qw(realpath);
use File::Basename;
use File::Temp qw/ :seekable /;
use FindBin;
use Getopt::Long;
use Pod::Usage;
use POSIX qw/ strftime /;
use Sys::Hostname;

$ENV{PATH} = $ENV{PATH} . ":../doc"; # help pod2usage find its docs
my $script_name = $FindBin::Script;
my $docs        = sprintf("%s/../doc/%s.pod",$FindBin::Bin,$FindBin::Script);
$docs           = realpath($docs); # clean up the path while we're still root

my $opt = {};
my @opt = qw(help man older-than=s exclude-source=s@ list-sources 
    dry-run verbose include-source=s% snapshot! pool=s version);
GetOptions($opt, @opt) or pod2usage(
    -input      => $docs,
    -verbose    => 2,
);
pod2usage(
    -input      => $docs,
    -verbose    => 1,
    ) if $opt->{'help'};
pod2usage(
    -input      => $docs,
    -verbose    => 2,
    -exitval => 0
    ) if $opt->{'man'};
if ($opt->{version}) {
    say "$VERSION";
    exit 0;
}
$opt->{snapshot} = 1 unless defined $opt->{snapshot};
if (defined $opt->{"include-source"} and defined $opt->{"exclude-source"}) {
    die "you can only specify one or the other of include-source and exclude-source.\n";
}
my $source_exclude = {};
if ($opt->{"exclude-source"}) {
    @$source_exclude{@{$opt->{"exclude-source"}}} = undef;
}

my $pool = $opt->{pool} || 'backup';
my %sources = (
	etc              => "/etc",
	home             => "/$pool/home_backup",
	home_fbicknel    => "/$pool/fbicknel_backup",
	Music_backup     => "/$pool/Music_backup",
	Pictures_backup  => "/$pool/Pictures_backup",
	root             => "/root",
);
if ($opt->{"include-source"}) {
    %sources = %{$opt->{"include-source"}};
    say "Default sources overridden." if $opt->{verbose};
}
if ($opt->{"list-sources"}) {
    for (keys %sources) {
        next if exists $source_exclude->{$_};
        say "$_\t$sources{$_}";
    }
    exit 0;
}

# TODO: add --pool and --dry-run to command line options for make_snapshot
# FIXME: why is path to make_snapshot hard-coded?
if (not $opt->{"dry-run"} and $opt->{snapshot}) {
    say "Making current snapshots for targets:";
    system("/root/bin/make_snapshot home ${pool}/home_backup");
    system("/root/bin/make_snapshot home/fbicknel ${pool}/fbicknel_backup");
    system("/root/bin/make_snapshot vsw/Music ${pool}/Music_backup");
    system("/root/bin/make_snapshot vsw/Pictures ${pool}/Pictures_backup");
} else {
    say "Snapshot phase skipped.";
}

my $older_than           = $opt->{"older-than"} || '6D';
# If you are looking for cleanup; see ~fbicknel/bin/cleanup
my $duplicity_options = "";
my $target_host = "bick-ubtu3";
my $archive_dir = "/root/.cache/duplicity";
my $target_path = "/mnt/backup/" . hostname ();
my $logFile = sprintf "/var/log/backup/%s/%s", hostname (), strftime ('%Y%m%d-%H%M%S', localtime);
my $logPath = dirname $logFile;
system "mkdir -p $logPath";
my @excludes = qw (
	**/Downloads/**
	**/tmp/**
	**/temp/**
	**/.cache/**
	**/Cache/**
	**/Trash/**
	**/Dropbox/**
);
push @excludes, "**/Ubuntu One/**";
push @excludes, "**/Azureus Downloads/**";

my $exclFH = File::Temp->new ();
print $exclFH join ("\n", @excludes);
$exclFH->seek (0, SEEK_SET);

my $duplProg = "/usr/bin/duplicity";
my $method = "file:/";
if ($target_host ne hostname ()) {
	$method = sprintf "scp://root\@%s", $target_host;
}
my $PASSPHRASE = '******';
unless ($opt->{"dry-run"}) {
    $PASSPHRASE = `cat /root/.passwords/dbackup`;
    chomp $PASSPHRASE;
    die "No passphrase or passphrase file!\n" unless $PASSPHRASE;
}
for my $targetRemote (sort keys %sources) {
    next if exists $source_exclude->{$targetRemote};
	my $target = $sources{$targetRemote};
	my $targetPath = "${method}/$target_path/$targetRemote";
	print "Writing backup $target to $targetPath\n";
	my $cmd = sprintf "%s --full-if-older-than $older_than --log-file %s --async --exclude-globbing-filelist=%s --verbosity 5 --archive-dir %s %s %s %s",
		$duplProg, $logFile, $exclFH, $archive_dir, $target, $targetPath, $duplicity_options || '';
    if ($opt->{"dry-run"}) {
        say "$cmd" if $opt->{verbose};
        next;
    }
	system "/bin/sh -c \"PASSPHRASE=\\\"$PASSPHRASE\\\" $cmd\"";
}
__END__

=head1 NAME

dbackup - Backup filesystems using duplicity

=head1 SYNOPSIS

dbackup --help
dbackup --man
dbackup --version
dbackup [ Options ]

=head1 OPTIONS

=over 8 

=item B<--help>

Print a brief help message and exit.

=item B<--man>

Print the manual page and exit.

=item B<--version>

Print the version and exit.

=item B<--older-than I<dup-directive>>

I<dup-directive> is something that duplicity would understand. To get
you started, you can use a number of days as I<n>D to indicate that you
want to do a full if the last full is more than I<n> days old.

=item B<--exclude-source I<source destination>>

You can list this option zero or more times. A I<source destination> is used
to call out a particular source from the source list. If excluded here,
then duplicity won't be called to back up that source.

You can use the B<list-sources> option to find out what sources are
listed and their destination.

This option is mutually exclusive with B<include-source>.

=item B<--list-sources> 

Sources are places you want to back up. They're identified by a destination,
and hard-coded into the program (for now: see B<BUGS>). This option
lists them out for you so you can see their destination, presumably so you can
use that destination in an B<exclude-source> option.

=item B<--dry-run>

Say what will be done, but don't actually do anything.

=item B<--verbose>

Say more about what will be or is being done.

=item B<--include-source>

You can list this option zero or more times. Override the hard-coded
source list with your own destination=source options. The destination you specify must
be a valid destination in the backup directory and the sources they point to
should be legitimate places to back up. No check is made as to whether
the source location is valid until duplicity runs.

This option is mutually exclusive with B<exclude-source>, but you can
still use B<list-sources> with it.

=item B<--[no]snapshot>

You can turn off the creation of a new snapshot here. The default is
--snapshot, so really only --nosnapshot does anything useful.

If you don't create a new snapshot, then whatever was last synced to the
target is what gets backed up.

=back


=head1 DESCRIPTION

Uses duplicity ultimately to move data from the filesystem into encrypted,
compressed backups. Sources are hardcoded for now, as are ZFS snapshot
preparations. However, you can exclude the duplicity sources and you
can provide your own source list to substitute for the hardcoded one.

=head1 EXAMPLES



=head1 SEE ALSO

duplicity
zfs

=head1 BUGS

Hard-coded sources, targets and snapshots.

=cut
