#!/bin/bash

function version () {
    echo "Version: $(/bin/cat /etc/borg/version)"
}

source /root/bin/borg_spinup

info() { printf "\n%s %s\n\n" "$(date)" "$*" >&2; }

MAKE_SS=1
DRY_RUN=0
LIST_ARCHIVES=0
INIT=0
for i in "$@"; do
    case $i in
        --dry-run)
            DRY_RUN=1
            ;;
        --init)
            INIT=1
            info "Setting up repository"
            borg                                \
                --verbose                       \
                init                            \
                --encryption repokey-blake2     \
                --make-parent-dirs              \
            exit $?
            ;;
        --list)
            info "Listing repository $@"
            borg list $@
            exit $?
            ;;
        --listarchives)
            LIST_ARCHIVES=1
            ;;
        --version)
            info "borgbackup $(version)"
            exit 0
            ;;
        --nosnapshot)
            MAKE_SS=0
            ;;
    esac
done

if [ $DRY_RUN != 1 ]; then
    exec >> /var/log/backup/borgbackup.log 2>&1
fi

trap 'echo $(date) Backup interrupted >&2; exit 2' INT TERM

if true; then
BACKUP_SOURCES=(/root                          \
                /etc                           \
                /rpool/usr/local               \
                /rpool/gnote                   \
                /home/fbicknel                 \
                /vsw/Pictures                  \
                /vsw/Music                     \
                /vsw/Meta                      \
                )

BACKUP_TARGETS=(SOURCE                         \
                SOURCE                         \
                /backup/rpool_usr_local_backup \
                /backup/gnote_backup           \
                /backup/fbicknel_backup        \
                /backup/Pictures_backup        \
                /backup/Music_backup           \
                SOURCE_SNAPSHOT                \
                )
else
    BACKUP_SOURCES=(/root \
        /rpool/usr/local \
        /vsw/Meta \
        )
    BACKUP_TARGETS=(SOURCE \
        /backup/rpool_usr_local_backup \
        SOURCE_SNAPSHOT            \
        )
fi

BACKUP_TARGETS_LEN=$((${#BACKUP_TARGETS[@]} - 1))
BACKUP_SOURCES_LEN=$((${#BACKUP_SOURCES[@]} - 1))

info "borgbackup Version $(version)"

if [ $LIST_ARCHIVES == 1 ]; then
    info "Listing repository by archives"
    for i in $(seq 0 ${BACKUP_TARGETS_LEN}); do
        SOURCE=${BACKUP_SOURCES[$i]}
        ARCHIVE=$(echo $SOURCE | cut -b 2- | tr / _)
        info "Listing archive ${ARCHIVE}"
        borg list --glob-archives "*-${ARCHIVE}-*"
    done
    exit $?
fi

if [ $MAKE_SS == 0  ]; then
    info "Not creating new snapshots."
fi
info "Starting backup"
if [ $BACKUP_TARGETS_LEN -ne $BACKUP_SOURCES_LEN -o \
    $BACKUP_TARGETS_LEN -lt 0 ]; then
    info "Invalid list of TARGETS and/or SOURCES."
    info "these lists should be the same length"
    info "and a non-empty list."
    exit 9
fi
if [ $BACKUP_TARGETS_LEN -gt 50 ]; then
    info "Seems like something's wrong. I thought you said we"
    info "have a list of ${BACKUP_TARGETS_LEN} entites to back up??"
    exit 1
fi
for i in $(seq 0 ${BACKUP_TARGETS_LEN}); do
    SOURCE=${BACKUP_SOURCES[$i]}
    unset SNAP_SOURCE SNAP_TARGET
    TARGET=${BACKUP_TARGETS[$i]}
    if [ "$TARGET" == "SOURCE_SNAPSHOT" ]; then
        # simple snapshot; no cloning
        if [ $MAKE_SS == 1 ]; then
            ZFS_FS=$(echo $SOURCE|cut -b 2-) # trim leading /
            if [ "$DRY_RUN" == 1 ]; then
                echo "zfs destroy ${ZFS_FS}@yesterday"
                echo "zfs rename ${ZFS_FS}@today yesterday"
                echo "zfs snapshot ${ZFS_FS}@today"
            else
                if [ -z "$MAKE_SS" ]; then
                    info "Not creating new snapshots"
                else
                    info "Remove *yesterday* snapshot"
                    zfs destroy ${ZFS_FS}@yesterday || info "No yesterday snapshot found"
                    info "Rename *today* to *yesterday*"
                    zfs rename ${ZFS_FS}@today yesterday || info "No today snapshot found"
                    info "Create new *today* snapshot*"
                    zfs snapshot ${ZFS_FS}@today || (info "Couldn't create today snapshot" && exit 2)
                fi
            fi
        fi
        # /vsw/Meta/.zfs/snapshot/today
        TARGET="${SOURCE}/.zfs/snapshot/today"
    elif [ "$TARGET" == 'SOURCE' ]; then
        TARGET=$SOURCE
    else
        SNAP_TARGET=$(echo $TARGET|cut -b 2-)
        SNAP_SOURCE=$(echo $SOURCE|cut -b 2-)
        if [ $MAKE_SS == 1 ]; then
            if [ "$DRY_RUN" == 1 ]; then
                echo "/root/bin/make_snapshot $SNAP_SOURCE $SNAP_TARGET (dry-run)"
            else
                /root/bin/make_snapshot $SNAP_SOURCE $SNAP_TARGET
            fi
        fi
    fi
    ARCHIVE=$(echo $SOURCE | cut -b 2- | tr / _)
    CMD="\
    borg create                           \
        --verbose                         \
        --stats                           \
        --list                            \
        --show-rc                         \
        --compression lz4                 \
        --exclude-from /etc/borg/patterns \
        ::'{hostname}-'${ARCHIVE}'-{now}' \
        ${TARGET}                         \
        "
    if [ "$DRY_RUN" == 1 ]; then
        echo "$CMD"
    else
        bash -c "$CMD"
    fi
done

backup_exit=$?

info "Pruning repository"
ANNOTE_BOTH="Backup and Prune"
ANNOTE_MABE="Backup and/or Prune"

# Use the `prune` subcommand to maintain 7 daily, 4 weekly and 6 monthly
# archives of THIS machine. The '{hostname}-' prefix is very important to
# limit prunes operation to this machines archives and not apply to
# other machines archives also:

HOSTNAME=$(hostname)
for i in $(seq 0 ${BACKUP_TARGETS_LEN}); do
    SOURCE=${BACKUP_SOURCES[$i]}
    ARCHIVE=$(echo $SOURCE | cut -b 2- | tr / _)
    info "Pruning archive $ARCHIVE"
    CMD=' \
    borg prune                          \
        --list                          \
        --glob-archives '\""${HOSTNAME}-${ARCHIVE}-*"\"' \
        --show-rc                       \
        --stats                         \
        --keep-daily    7               \
        --keep-weekly   4               \
        --keep-monthly  6               \
        '
    if [ "$DRY_RUN" == 1 ]; then
        echo "$CMD"
    else
        bash -c "$CMD"
    fi
    prune_exit=$?
done

# use highest exit code as global exit code
global_exit=$(( backup_exit > prune_exit ? backup_exit : prune_exit ))

if [ ${global_exit} -eq 0 ]; then
    info "$ANNOTE_BOTH finished successfully"
elif [ ${global_exit} -eq 1 ]; then
    info "$ANNOTE_MABE finished with warnings"
else
    info "$ANNOTE_MABE finished with errors"
fi

exit ${global_exit}
