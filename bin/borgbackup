#!/bin/bash

if [ "$1" == '--dry-run' ]; then
    shift
    DRY_RUN=1
else
    :
    exec >> /var/log/backup/borgbackup.log 2>&1
fi

function version () {
    echo "Version: $(/bin/cat /etc/borg/version)"
}


source /root/bin/borg_spinup

info() { printf "\n%s %s\n\n" "$(date)" "$*" >&2; }

trap 'echo $(date) Backup interrupted >&2; exit 2' INT TERM
MAKE_SS=Y # default to make a snapshot
BACKUP_TARGETS=(SOURCE                         \
                SOURCE                         \
                /backup/rpool_usr_local_backup \
                /backup/gnote_backup           \
                /backup/fbicknel_backup        \
                /backup/Pictures_backup        \
                /backup/Music_backup           \
                SOURCE_SNAPSHOT                \
                )

BACKUP_SOURCES=(/root                          \
                /etc                           \
                /rpool/usr/local               \
                /rpool/gnote                   \
                /home/fbicknel                 \
                /vsw/Pictures                  \
                /vsw/Music                     \
                /vsw/Meta                      \
                )
BACKUP_TARGETS_LEN=$((${#BACKUP_TARGETS[@]} - 1))
BACKUP_SOURCES_LEN=$((${#BACKUP_SOURCES[@]} - 1))

if [ "$1" == 'init' ]; then
    info "Setting up repository"
    borg                                \
        --verbose                       \
        init                            \
        --encryption repokey-blake2     \
        --make-parent-dirs              \
    exit
elif [ "$1" == 'list' ]; then
    shift
    info "Listing repository $@"
    borg list $@
    exit
elif [ "$1" == 'listarchives' ]; then
    shift
    info "Listing repository by archives"
    for i in $(seq 0 ${BACKUP_TARGETS_LEN}); do
        SOURCE=${BACKUP_SOURCES[$i]}
        ARCHIVE=$(echo $SOURCE | cut -b 2- | tr / _)
        info "Listing archive ${ARCHIVE}"
        borg list --glob-archives "*-${ARCHIVE}-*"
    done
    exit
elif [ "$1" == 'version' -o "$1" == '--version' ]; then
    info "borgbackup Version $(version)"
    exit
elif [ "$1" == 'nosnapshot' ]; then
    unset MAKE_SS
fi
info "borgbackup Version $(version)"
if [ -z "$MAKE_SS" ]; then
    info "Not creating new snapshots."
fi
info "Starting backup"
if [ $BACKUP_TARGETS_LEN -ne $BACKUP_SOURCES_LEN -o \
    $BACKUP_TARGETS_LEN -lt 1 ]; then
    info "Invalid list of TARGETS and/or SOURCES."
    info "these lists should be the same length"
    info "and a non-empty list."
    exit 9
fi
if [ $BACKUP_TARGETS_LEN -gt 50 ]; then
    info "Seems like something's wrong. I thought you said we"
    info "have a list of ${BACKUP_TARGETS_LEN} entites to back up??"
    exit 1
fi
TARGET_LIST=()
for i in $(seq 0 ${BACKUP_TARGETS_LEN}); do
    SOURCE=${BACKUP_SOURCES[$i]}
    unset SNAP_SOURCE SNAP_TARGET
    TARGET=${BACKUP_TARGETS[$i]}
    if [ "$TARGET" == "SOURCE_SNAPSHOT" ]; then
        # simple snapshot; no cloning
        TARGET=$SOURCE
        if [ -n "$MAKE_SS" ]; then
            ZFS_FS=$(echo $SOURCE|cut -b 2-) # trim leading /
            if [ "$DRY_RUN" == 1 ]; then
                echo "zfs destroy ${ZFS_FS}@yesterday"
                echo "zfs rename ${ZFS_FS}@today yesterday"
                echo "zfs snapshot ${ZFS_FS}@today"
            else
                zfs destroy ${ZFS_FS}@yesterday || info "No yesterday snapshot found"
                zfs rename ${ZFS_FS}@today yesterday || info "No today snapshot found"
                zfs snapshot ${ZFS_FS}@today || (info "Couldn't create today snapshot" && exit 2)
            fi
            TARGET=$(echo $TARGET|cut -b 2-)'@today'
        fi
    elif [ "$TARGET" == 'SOURCE' ]; then
        TARGET=$SOURCE
    else
        SNAP_TARGET=$(echo $TARGET|cut -b 2-)
        SNAP_SOURCE=$(echo $SOURCE|cut -b 2-)
        if [ -n "$MAKE_SS" ]; then
            if [ "$DRY_RUN" == 1 ]; then
                echo "/root/bin/make_snapshot $SNAP_SOURCE $SNAP_TARGET (dry-run)"
            else
                /root/bin/make_snapshot $SNAP_SOURCE $SNAP_TARGET
            fi
        fi
    fi
    ARCHIVE=$(echo $SOURCE | cut -b 2- | tr / _)
    TARGET_LIST+=($TARGET)
    CMD="\
    borg create                           \
        --verbose                         \
        --stats                           \
        --list                            \
        --show-rc                         \
        --compression lz4                 \
        --exclude-from /etc/borg/patterns \
        ::'{hostname}-'${ARCHIVE}'-{now}' \
        ${TARGET}                         \
        "
    if [ "$DRY_RUN" == 1 ]; then
        echo "$CMD"
    else
        set -x
        bash -c "$CMD"
        set -
    fi
done

backup_exit=$?

if [ "$1" == 'init' ]; then
    info "That's it."
    prune_exit=0
    ANNOTE="Init"
else
    info "Pruning repository"
    ANNOTE_BOTH="Backup and Prune"
    ANNOTE_MABE="Backup and/or Prune"

    # Use the `prune` subcommand to maintain 7 daily, 4 weekly and 6 monthly
    # archives of THIS machine. The '{hostname}-' prefix is very important to
    # limit prunes operation to this machines archives and not apply to
    # other machines archives also:

    HOSTNAME=$(hostname)
    for i in $(seq 0 ${BACKUP_TARGETS_LEN}); do
        SOURCE=${BACKUP_SOURCES[$i]}
        ARCHIVE=$(echo $SOURCE | cut -b 2- | tr / _)
        info "Pruning archive $ARCHIVE"
        CMD=' \
        borg prune                          \
            --list                          \
            --glob-archives '\""${HOSTNAME}-${ARCHIVE}-*"\"' \
            --show-rc                       \
            --stats                         \
            --keep-daily    7               \
            --keep-weekly   4               \
            --keep-monthly  6               \
            '
        if [ "$DRY_RUN" == 1 ]; then
            echo "$CMD"
        else
            set -x
            bash -c "$CMD"
            set -
        fi
        prune_exit=$?
    done

fi
# use highest exit code as global exit code
global_exit=$(( backup_exit > prune_exit ? backup_exit : prune_exit ))

if [ ${global_exit} -eq 0 ]; then
    info "$ANNOTE_BOTH finished successfully"
elif [ ${global_exit} -eq 1 ]; then
    info "$ANNOTE_MABE finished with warnings"
else
    info "$ANNOTE_MABE finished with errors"
fi

exit ${global_exit}
