#!/bin/bash

# Setting this, so the repo does not need to be given on the commandline:
# export BORG_REPO=ssh://username@example.com:2022/~/backup/main
export BORG_REPO='/mnt/backup/borgbackup'
export BORG_CACHE_DIR='/root/.cache'
export BORG_CONFIG_DIR='/root/.config/borg'

# Setting this, so you won't be asked for your repository passphrase:
# export BORG_PASSPHRASE='no, we don't use this'
# or this to ask an external program to supply the passphrase:
export BORG_PASSCOMMAND='cat /root/.passwords/borgbackup-prod'

info() { printf "\n%s %s\n\n" "$(date)" "$*" >&2; }

trap 'echo $(date) Backup interrupted >&2; exit 2' INT TERM

if [ "$1" == 'init' ]; then
    info "Setting up repository"
    borg                                \
        --verbose                       \
        init                            \
        --encryption repokey-blake2     \
        --make-parent-dirs              \

elif [ "$1" == 'list' ]; then
    shift
    info "Listing repository $@"
    borg list $@
    exit
else
    info "Starting backup"
    BACKUP_TARGETS=(SOURCE                         \
                    SOURCE                         \
                    /backup/rpool_usr_local_backup \
                    /backup/gnote_backup           \
                    /backup/fbicknel_backup        \
                    /backup/Pictures_backup        \
                    /backup/Music_backup           \
                    )

    BACKUP_SOURCES=(/root                          \
                    /etc                           \
                    /rpool/usr/local               \
                    /rpool/gnote                   \
                    /home/fbicknel                 \
                    /vsw/Pictures                  \
                    /vsw/Music                     \
                    )
    BACKUP_TARGETS_LEN=$((${#BACKUP_TARGETS[@]} - 1))
    BACKUP_SOURCES_LEN=$((${#BACKUP_SOURCES[@]} - 1))
    if [ $BACKUP_TARGETS_LEN -ne $BACKUP_SOURCES_LEN -o \
        $BACKUP_TARGETS_LEN -lt 1 ]; then
        echo "Invalid list of TARGETS and/or SOURCES."
        echo "these lists should be the same length"
        echo "and a non-empty list."
        exit 9
    fi
    if [ $BACKUP_TARGETS_LEN -gt 50 ]; then
        echo "Seems like something's wrong. I thought you said we"
        echo "have a list of ${BACKUP_TARGETS_LEN} entites to back up??"
        exit 1
    fi
    for i in $(seq 0 ${BACKUP_TARGETS_LEN}); do
        # echo $i
        TARGET=${BACKUP_TARGETS[$i]}
        SOURCE=${BACKUP_SOURCES[$i]}
        # echo "s: $SOURCE t: $TARGET"
        ARCHIVE=$(echo $SOURCE | cut -b 2- | tr / _)
        SNAP_TARGET=$(echo $TARGET|cut -b 2-)
        SNAP_SOURCE=$(echo $SOURCE|cut -b 2-)
        # echo "a: $ARCHIVE"
        if [ "$1" == "nosnapshot" ]; then
            :
        else
            if [ "$TARGET" != "SOURCE" ]; then
                /root/bin/make_snapshot $SNAP_SOURCE $SNAP_TARGET
            else
                TARGET=$SOURCE
            fi
        fi
        borg create                           \
            --verbose                         \
            --stats                           \
            --list                            \
            --show-rc                         \
            --compression lz4                 \
            --exclude-from /etc/borg/patterns \
            ::'{hostname}-'${ARCHIVE}'-{now}' \
            ${TARGET}                         \

    done
fi

backup_exit=$?

if [ "$1" == 'init' ]; then
    info "That's it."
    prune_exit=0
    ANNOTE="Init"
else
    info "Pruning repository"
    ANNOTE_BOTH="Backup and Prune"
    ANNOTE_MABE="Backup and/or Prune"

# Use the `prune` subcommand to maintain 7 daily, 4 weekly and 6 monthly
# archives of THIS machine. The '{hostname}-' prefix is very important to
# limit prune's operation to this machine's archives and not apply to
# other machines' archives also:

    borg prune                          \
        --list                          \
        --prefix '{hostname}-'          \
        --show-rc                       \
        --stats                         \
        --keep-within 2d                \
        --keep-daily    7               \
        --keep-weekly   4               \
        --keep-monthly  6               \

    prune_exit=$?

fi
# use highest exit code as global exit code
global_exit=$(( backup_exit > prune_exit ? backup_exit : prune_exit ))

if [ ${global_exit} -eq 0 ]; then
    info "$ANNOTE_BOTH finished successfully"
elif [ ${global_exit} -eq 1 ]; then
    info "$ANNOTE_MABE finished with warnings"
else
    info "$ANNOTE_MABE finished with errors"
fi

exit ${global_exit}
